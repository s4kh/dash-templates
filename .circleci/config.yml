# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true
  template_name:
    type: string
    default: ''

executors:
  node:
    docker:
      - image: circleci/node

orbs: 
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  trigger-workflows:
    executor: node
    steps:
      - checkout
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/trigger-ci.sh && .circleci/trigger-ci.sh

  build:
    parameters:
      template_name:
        type: string
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/python:3.8.11
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    working_directory: ~/project/<< parameters.template_name >>
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Content 
          command: echo "<< parameters.template_name >> building."
      - run:
          name: "install deps"
          command: pip install -r requirements.txt --extra-index-url https://dash-playground.plotly.host/Docs/packages
      - run:
          name: "run web cmd"
          command: gunicorn app:server --workers 4
          background: true
      - run:
          name: "test"
          command: pytest
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows
      
  build-deploy:
    when: << pipeline.parameters.template_name >>
    jobs:
      - build:
          template_name: << pipeline.parameters.template_name >>

